test_res$table
test_res$overall[1]
library(graphics)
library(MASS)
library(caret)
library(dplyr)
library(Jmisc)
set.seed(1337)
# convert vector to matrix
vec2mat = function(vec, dim) {
return(matrix(unlist(vec), ncol=dim, byrow=T)[,dim:1])
}
# read data
dat = read.table('HA_2_zip.train')
dat_two <- dat[which(dat[,1] == 2), 2:257]
# plot first 24 digits
par(mfrow = c(3, 4))
no = 1
for (n in 1:2) {
for (i in 1:12) {
img_i = vec2mat(dat_two[no, 256:1], dim=16)
image(
t(img_i), xaxt='n', yaxt='n',
xlab='', ylab='', main=paste("Image", no)
)
no = no + 1
}
}
# convert data with digit 2 to matrix
dat_two_mat = matrix(
unlist(dat_two),
nrow=dim(dat_two)[1],
ncol=dim(dat_two)[2]
)
# compute PC's and eigenvectors
dat_two_dem = demean(dat_two_mat)
#S_two = t(dat_two_dem) %*% dat_two_dem
S_two = cov(dat_two_mat)
eigen_el = eigen(S_two)
Q_two = eigen_el$vectors
eigen_val = eigen_el$values
pc_two = dat_two_mat %*% Q_two
# first 4 PC's
par(mfrow=c(1, 2), oma=c(0, 0, 2, 0))
for (i in 1:4) {
if (i == 3) {
par(mfrow=c(1, 2))
}
pc = Q_two[, i]
img = vec2mat(pc[256:1], dim=16)
image(t(img), xaxt='n', yaxt='n', xlab='', ylab='', main=paste("PC", i))
if (i == 2) {
title("First four PC's", outer=T)
}
}
# last 4 PC's
par(mfrow=c(1, 2), oma=c(0, 0, 2, 0))
for (i in 1:4) {
if (i == 3) {
par(mfrow=c(1, 2))
}
pc = Q_two[, (dim(dat_two_mat)[2] - 4) + i]
img = vec2mat(pc[256:1], dim=16)
image(t(img), xaxt='n', yaxt='n', xlab='', ylab='', main=paste("PC", i))
if (i == 2) {
title("Last four PC's", outer=T)
}
}
set.seed(1337)
par(mfrow=c(2, 3), oma=c(0, 0, 2, 0))
n = c(30, 60, 100, 150, 200)
rnd_idx = sample(1:dim(dat_two_mat)[1], 1)
real_vec = dat_two_mat[rnd_idx, 256:1]
real_img = vec2mat(real_vec, dim=16)
mse = vector()
j = 1
for (i in n) {
q = Q_two[, 1:i]
pc = real_vec %*% q
est_vec = pc %*% t(q)
img = vec2mat(est_vec, dim=16)
image(t(img), xaxt='n', yaxt='n', xlab='', ylab='', main=paste(i, "PC's"))
mse[j] = round(sum((real_vec - est_vec)^2) / length(real_vec), 4)
j = j + 1
}
image(t(real_img), xaxt='n', yaxt='n', xlab='', ylab='', main="Original Image")
title(paste("Approximation of Image", rnd_idx), outer=T)
mse_df = data.frame(
n_PC = c(n),
MSE = c(mse)
)
print(mse_df)
tot_var = sum(eigen_val)
var_exp = cumsum(eigen_val / tot_var)
barplot(
var_exp[1:40] * 100,
names.arg=1:40,
xlab="Principal Component",
ylab="Variance Epxlained (%)",
ylim=c(0, 100),
col=3
)
abline(h=85, col=2)
legend(x=38, y=100, legend="85%-limit", col=2, lty=1, cex=.75)
paste("PC's needed to explain 85% of the variance:", sum(var_exp <= 0.85) + 1)
dat_5 = dat[which(dat[,1] == 5), 1:257]
dat_6 = dat[which(dat[,1] == 6), 1:257]
c_dat = rbind(dat_5, dat_6)
set.seed(1337)
# randomly split data into train and test, 80%/20%
n = dim(c_dat)[1]
idx = sample(1:n, floor(0.8 * n))
train_dat = c_dat[idx, ]
test_dat = c_dat[-idx, ]
train = train_dat[, 2:257]
train_label = train_dat[, 1]
test = test_dat[, 2:257]
test_label = test_dat[, 1]
# compute eigen vectors
X_train = matrix(unlist(train), nrow=dim(train)[1], ncol=256)
X_test = matrix(unlist(test), nrow=dim(test)[1], ncol=256)
# compute PC's for train and test data
X_dem = demean(X_train)
S_train= t(X_dem) %*% X_dem
Q_train = eigen(S_train)$vectors
pc_train = X_train %*% Q_train
pc_test = X_test  %*% Q_train
# format training data
train_data = as.data.frame(cbind(pc_train, train_label))
# fit LDA model
mdl = lda(
train_label ~ V1 + V2,
data=train_data
)
# predict test set
test_pred = predict(mdl, as.data.frame(pc_test))$class
# compute confusion matrix and test accuracy
test_res = confusionMatrix(
data=factor(test_pred),
reference=factor(test_label)
)
test_res$table
test_res$overall[1]
# first 4 PC's
par(mfrow=c(1, 2), oma=c(0, 0, 2, 0))
for (i in 1:4) {
if (i == 3) {
par(mfrow=c(1, 2))
}
pc = Q_two[, i]
img = vec2mat(pc[256:1], dim=16)
image(t(img), xaxt='n', yaxt='n', xlab='', ylab='', main=paste("EV", i))
if (i == 2) {
title("First four eigenvectors (EV)", outer=T)
}
}
# last 4 PC's
par(mfrow=c(1, 2), oma=c(0, 0, 2, 0))
for (i in 1:4) {
if (i == 3) {
par(mfrow=c(1, 2))
}
pc = Q_two[, (dim(dat_two_mat)[2] - 4) + i]
img = vec2mat(pc[256:1], dim=16)
image(t(img), xaxt='n', yaxt='n', xlab='', ylab='', main=paste("EV", i))
if (i == 2) {
title("Last four eigenvectors (EV)", outer=T)
}
}
library(graphics)
library(MASS)
library(caret)
library(dplyr)
library(Jmisc)
set.seed(1337)
# convert vector to matrix
vec2mat = function(vec, dim) {
return(matrix(unlist(vec), ncol=dim, byrow=T)[,dim:1])
}
# read data
dat = read.table('HA_2_zip.train')
dat_two <- dat[which(dat[,1] == 2), 2:257]
# plot first 24 digits
par(mfrow = c(3, 4))
no = 1
for (n in 1:2) {
for (i in 1:12) {
img_i = vec2mat(dat_two[no, 256:1], dim=16)
image(
t(img_i), xaxt='n', yaxt='n',
xlab='', ylab='', main=paste("Image", no)
)
no = no + 1
}
}
# convert data with digit 2 to matrix
dat_two_mat = matrix(
unlist(dat_two),
nrow=dim(dat_two)[1],
ncol=dim(dat_two)[2]
)
# compute PC's and eigenvectors
dat_two_dem = demean(dat_two_mat)
S_two = t(dat_two_dem) %*% dat_two_dem
eigen_el = eigen(S_two)
Q_two = eigen_el$vectors
eigen_val = eigen_el$values
pc_two = dat_two_mat %*% Q_two
# first 4 PC's
par(mfrow=c(1, 2), oma=c(0, 0, 2, 0))
for (i in 1:4) {
if (i == 3) {
par(mfrow=c(1, 2))
}
pc = Q_two[, i]
img = vec2mat(pc[256:1], dim=16)
image(t(img), xaxt='n', yaxt='n', xlab='', ylab='', main=paste("EV", i))
if (i == 2) {
title("First four eigenvectors (EV)", outer=T)
}
}
# last 4 PC's
par(mfrow=c(1, 2), oma=c(0, 0, 2, 0))
for (i in 1:4) {
if (i == 3) {
par(mfrow=c(1, 2))
}
pc = Q_two[, (dim(dat_two_mat)[2] - 4) + i]
img = vec2mat(pc[256:1], dim=16)
image(t(img), xaxt='n', yaxt='n', xlab='', ylab='', main=paste("EV", i))
if (i == 2) {
title("Last four eigenvectors (EV)", outer=T)
}
}
set.seed(1337)
par(mfrow=c(2, 3), oma=c(0, 0, 2, 0))
n = c(30, 60, 100, 150, 200)
rnd_idx = sample(1:dim(dat_two_mat)[1], 1)
real_vec = dat_two_mat[rnd_idx, 256:1]
real_img = vec2mat(real_vec, dim=16)
mse = vector()
j = 1
for (i in n) {
q = Q_two[, 1:i]
pc = real_vec %*% q
est_vec = pc %*% t(q)
img = vec2mat(est_vec, dim=16)
image(t(img), xaxt='n', yaxt='n', xlab='', ylab='', main=paste(i, "PC's"))
mse[j] = round(sum((real_vec - est_vec)^2) / length(real_vec), 4)
j = j + 1
}
image(t(real_img), xaxt='n', yaxt='n', xlab='', ylab='', main="Original Image")
title(paste("Approximation of Image", rnd_idx), outer=T)
mse_df = data.frame(
n_PC = c(n),
MSE = c(mse)
)
print(mse_df)
tot_var = sum(eigen_val)
var_exp = cumsum(eigen_val / tot_var)
barplot(
var_exp[1:40] * 100,
names.arg=1:40,
xlab="Principal Component",
ylab="Variance Epxlained (%)",
ylim=c(0, 100),
col=3
)
abline(h=85, col=2)
legend(x=38, y=100, legend="85%-limit", col=2, lty=1, cex=.75)
paste("PC's needed to explain 85% of the variance:", sum(var_exp <= 0.85) + 1)
dat_5 = dat[which(dat[,1] == 5), 1:257]
dat_6 = dat[which(dat[,1] == 6), 1:257]
c_dat = rbind(dat_5, dat_6)
set.seed(1337)
# randomly split data into train and test, 80%/20%
n = dim(c_dat)[1]
idx = sample(1:n, floor(0.8 * n))
train_dat = c_dat[idx, ]
test_dat = c_dat[-idx, ]
train = train_dat[, 2:257]
train_label = train_dat[, 1]
test = test_dat[, 2:257]
test_label = test_dat[, 1]
# compute eigen vectors
X_train = matrix(unlist(train), nrow=dim(train)[1], ncol=256)
X_test = matrix(unlist(test), nrow=dim(test)[1], ncol=256)
# compute PC's for train and test data
X_dem = demean(X_train)
S_train= t(X_dem) %*% X_dem
Q_train = eigen(S_train)$vectors
pc_train = X_train %*% Q_train
pc_test = X_test  %*% Q_train
# format training data
train_data = as.data.frame(cbind(pc_train, train_label))
# fit LDA model
mdl = lda(
train_label ~ V1 + V2,
data=train_data
)
# predict test set
test_pred = predict(mdl, as.data.frame(pc_test))$class
# compute confusion matrix and test accuracy
test_res = confusionMatrix(
data=factor(test_pred),
reference=factor(test_label)
)
test_res$table
test_res$overall[1]
paste("PC's needed to explain 85% of the variance:", sum(var_exp < 0.85) + 1)
X_dem[1]
mean(X_train)
X_train[1]
mean(X_train[,1])
-1 - (mean(X_train[,1]))
library(graphics)
library(MASS)
library(caret)
library(dplyr)
library(Jmisc)
install.packages('Jmisc')
library(graphics)
library(MASS)
library(caret)
library(dplyr)
library(Jmisc)
set.seed(1337)
# convert vector to matrix
vec2mat = function(vec, dim) {
return(matrix(unlist(vec), ncol=dim, byrow=T)[,dim:1])
}
# read data
dat = read.table('HA_2_zip.train')
dat_two <- dat[which(dat[,1] == 2), 2:257]
# plot first 24 digits
par(mfrow = c(3, 4))
no = 1
for (n in 1:2) {
for (i in 1:12) {
img_i = vec2mat(dat_two[no, 256:1], dim=16)
image(
t(img_i), xaxt='n', yaxt='n',
xlab='', ylab='', main=paste("Image", no)
)
no = no + 1
}
}
# convert data with digit 2 to matrix
dat_two_mat = matrix(
unlist(dat_two),
nrow=dim(dat_two)[1],
ncol=dim(dat_two)[2]
)
# compute PC's and eigenvectors
dat_two_dem = demean(dat_two_mat)
S_two = t(dat_two_dem) %*% dat_two_dem
eigen_el = eigen(S_two)
Q_two = eigen_el$vectors
eigen_val = eigen_el$values
pc_two = dat_two_mat %*% Q_two
# first 4 PC's
par(mfrow=c(1, 2), oma=c(0, 0, 2, 0))
for (i in 1:4) {
if (i == 3) {
par(mfrow=c(1, 2))
}
pc = Q_two[, i]
img = vec2mat(pc[256:1], dim=16)
image(t(img), xaxt='n', yaxt='n', xlab='', ylab='', main=paste("EV", i))
if (i == 2) {
title("First four eigenvectors (EV)", outer=T)
}
}
# last 4 PC's
par(mfrow=c(1, 2), oma=c(0, 0, 2, 0))
for (i in 1:4) {
if (i == 3) {
par(mfrow=c(1, 2))
}
pc = Q_two[, (dim(dat_two_mat)[2] - 4) + i]
img = vec2mat(pc[256:1], dim=16)
image(t(img), xaxt='n', yaxt='n', xlab='', ylab='', main=paste("EV", i))
if (i == 2) {
title("Last four eigenvectors (EV)", outer=T)
}
}
set.seed(1337)
par(mfrow=c(2, 3), oma=c(0, 0, 2, 0))
n = c(30, 60, 100, 150, 200)
rnd_idx = sample(1:dim(dat_two_mat)[1], 1)
real_vec = dat_two_mat[rnd_idx, 256:1]
real_img = vec2mat(real_vec, dim=16)
mse = vector()
j = 1
for (i in n) {
q = Q_two[, 1:i]
pc = real_vec %*% q
est_vec = pc %*% t(q)
img = vec2mat(est_vec, dim=16)
image(t(img), xaxt='n', yaxt='n', xlab='', ylab='', main=paste(i, "PC's"))
mse[j] = round(sum((real_vec - est_vec)^2) / length(real_vec), 4)
j = j + 1
}
image(t(real_img), xaxt='n', yaxt='n', xlab='', ylab='', main="Original Image")
title(paste("Approximation of Image", rnd_idx), outer=T)
mse_df = data.frame(
n_PC = c(n),
MSE = c(mse)
)
print(mse_df)
tot_var = sum(eigen_val)
var_exp = cumsum(eigen_val / tot_var)
barplot(
var_exp[1:40] * 100,
names.arg=1:40,
xlab="Principal Component",
ylab="Variance Epxlained (%)",
ylim=c(0, 100),
col=3
)
abline(h=85, col=2)
legend(x=38, y=100, legend="85%-limit", col=2, lty=1, cex=.75)
paste("PC's needed to explain 85% of the variance:", sum(var_exp < 0.85) + 1)
dat_5 = dat[which(dat[,1] == 5), 1:257]
dat_6 = dat[which(dat[,1] == 6), 1:257]
c_dat = rbind(dat_5, dat_6)
set.seed(1337)
# randomly split data into train and test, 80%/20%
n = dim(c_dat)[1]
idx = sample(1:n, floor(0.8 * n))
train_dat = c_dat[idx, ]
test_dat = c_dat[-idx, ]
train = train_dat[, 2:257]
train_label = train_dat[, 1]
test = test_dat[, 2:257]
test_label = test_dat[, 1]
# compute eigen vectors
X_train = matrix(unlist(train), nrow=dim(train)[1], ncol=256)
X_test = matrix(unlist(test), nrow=dim(test)[1], ncol=256)
# compute PC's for train and test data
X_dem = demean(X_train)
S_train= t(X_dem) %*% X_dem
Q_train = eigen(S_train)$vectors
pc_train = X_train %*% Q_train
pc_test = X_test  %*% Q_train
# format training data
train_data = as.data.frame(cbind(pc_train, train_label))
# fit LDA model
mdl = lda(
train_label ~ V1 + V2,
data=train_data
)
# predict test set
test_pred = predict(mdl, as.data.frame(pc_test))$class
# compute confusion matrix and test accuracy
test_res = confusionMatrix(
data=factor(test_pred),
reference=factor(test_label)
)
test_res$table
test_res$overall[1]
View(train_data)
# convert data with digit 2 to matrix
dat_two_mat = matrix(
unlist(dat_two),
nrow=dim(dat_two)[1],
ncol=dim(dat_two)[2]
)
# compute PC's and eigenvectors
dat_two_dem = demean(dat_two_mat)
S_two = t(dat_two_dem) %*% dat_two_dem
eigen_el = eigen(S_two)
Q_two = eigen_el$vectors
eigen_val = eigen_el$values
pc_two = dat_two_mat %*% Q_two
# first 4 PC's
par(mfrow=c(1, 2), oma=c(0, 0, 2, 0))
for (i in 1:4) {
if (i == 3) {
par(mfrow=c(1, 2))
}
ev = Q_two[, i]
img = vec2mat(ev[256:1], dim=16)
image(t(img), xaxt='n', yaxt='n', xlab='', ylab='', main=paste("EV", i))
if (i == 2) {
title("First four eigenvectors (EV)", outer=T)
}
}
# last 4 PC's
par(mfrow=c(1, 2), oma=c(0, 0, 2, 0))
for (i in 1:4) {
if (i == 3) {
par(mfrow=c(1, 2))
}
pc = Q_two[, (dim(dat_two_mat)[2] - 4) + i]
img = vec2mat(pc[256:1], dim=16)
image(t(img), xaxt='n', yaxt='n', xlab='', ylab='', main=paste("EV", i))
if (i == 2) {
title("Last four eigenvectors (EV)", outer=T)
}
}
Q_train[, 1]
Q_train[, 1] %*% t(Q_train[, 1])
test = Q_train[, 1] %*% t(Q_train[, 1])
dim(test)
dim(Q_train[, 1])
test = t(Q_train[, 1]) %*% Q_train[, 1]
test
test = t(Q_train[, 2]) %*% Q_train[, 2]
test
Q_train[, 1]^2
sum(Q_train[, 1]^2)
