w5 = Mod$scaling
mu5_vec = colSums(mu5)
dim(mu5_vec) = c(2, 1)
c5 = (1 / 3) * w5 %*% mu5_vec
lda_k5_1 = w5[1, 1] / -w5[1, 2]
lda_m5_1 = c5[1] / w5[1, 2]
lda_k5_2 = w5[2, 1] / -w5[2, 2]
lda_m5_2 = c5[2] / w5[2, 2]
plot(
z1,
col=2,
xlim=c(-6, 4),
ylim = c(-6, 6),
xlab=expression('x'[1]),
ylab=expression('x'[2]),
pch=20
)
points(z2, col=3, pch=20)
points(z3, col=4, pch=20)
abline(a=lda_m5_1, b=lda_k5_1, lty=1)
abline(a=lda_m5_2, b=lda_k5_2, lty=2)
grid()
legend(
"topleft",
legend=c("Class 1", "Class 2", "Class 3"),
pch=20,
col=c(2, 3, 4),
bg="white"
)
mu1_s = colMeans(z1)
mu2_s = colMeans(z2)
mu3_s = colMeans(z3)
S = pooled.cov(rbind(z1, z2, z3), c(lab1, lab2, lab3)) # pooled covariance
MU_pos = mu1_s + mu2_s
dim(MU_pos) = c(2, 1)
MU_neg = mu2_s - mu1_s
dim(MU_neg) = c(2, 1)
c = (1 / 2) * t(MU_pos) %*% inv(S) %*% MU_neg
x = t(MU_neg) %*% inv(S)
k1 = x[1] / -x[2]
m1 = c / x[2]
MU_pos = mu1_s + mu3_s
dim(MU_pos) = c(2, 1)
MU_neg = mu3_s - mu1_s
dim(MU_neg) = c(2, 1)
c = (1 / 2) * t(MU_pos) %*% inv(S) %*% MU_neg
x = t(MU_neg) %*% inv(S)
k2 = x[1] / -x[2]
m2 = c / x[2]
MU_pos = mu2_s + mu3_s
dim(MU_pos) = c(2, 1)
MU_neg = mu3_s - mu2_s
dim(MU_neg) = c(2, 1)
c = (1 / 2) * t(MU_pos) %*% inv(S) %*% MU_neg
x = t(MU_neg) %*% inv(S)
k3 = x[1] / -x[2]
m3 = c / x[2]
# task 6
plot(
z1,
col=2,
xlim=c(-6, 4),
ylim = c(-6, 6),
xlab=expression('x'[1]),
ylab=expression('x'[2]),
pch=20
)
points(z2, col=3, pch=20)
points(z3, col=4, pch=20)
abline(a=m1, b=k1, lty=1, lwd=2)
abline(a=m2, b=k2, lty=2, lwd=2)
abline(a=m3, b=k3, lty=3, lwd=2)
grid()
legend(
"topleft",
legend=c("Class 1", "Class 2", "Class 3"),
pch=20,
col=c(2, 3, 4),
bg="white"
)
plot(
z1,
col=2,
xlim=c(-6, 4),
ylim = c(-6, 6),
xlab=expression('x'[1]),
ylab=expression('x'[2]),
pch=20
)
points(z2, col=3, pch=20)
points(z3, col=4, pch=20)
points(
d1_pred,
col=2,
pch=20
)
points(
d2_pred,
col=3,
pch=20
)
points(
d3_pred,
col=4,
pch=20
)
abline(a=m1, b=k1, lty=1, lwd=2)
abline(a=m2, b=k2, lty=2, lwd=2)
abline(a=m3, b=k3, lty=3, lwd=2)
grid()
legend(
"topleft",
legend=c("Class 1", "Class 2", "Class 3"),
pch=20,
col=c(2, 3, 4),
bg="white"
)
plot(
z1,
col=2,
xlim=c(-6, 4),
ylim = c(-6, 6),
xlab=expression('x'[1]),
ylab=expression('x'[2]),
pch=20
)
points(z2, col=3, pch=20)
points(z3, col=4, pch=20)
points(
d1_pred,
col=2,
pch=20
)
points(
d2_pred,
col=3,
pch=20
)
points(
d3_pred,
col=4,
pch=20
)
abline(a=m1, b=k1, lty=1, lwd=2)
abline(a=m2, b=k2, lty=2, lwd=2)
abline(a=m3, b=k3, lty=3, lwd=2)
grid()
legend(
"topleft",
legend=c("Class 1", "Class 2", "Class 3"),
pch=20,
col=c(2, 3, 4),
bg="white"
)
set.seed(1337)
n1 = n2 = 150
mu1 = c(0, 0)
mu2 = c(-3, 2)
z1 = SimDesign::rmvnorm(n1, mu1)
lab1 = rep(1, n1)
z2 = SimDesign::rmvnorm(n2, mu2)
lab2 = rep(2, n2)
plot(
z1,
col=2,
xlim=c(-7, 4),
ylim = c(-3, 5),
xlab=expression('x'[1]),
ylab=expression('x'[2]),
pch=20
)
points(z2, col=3, pch=20)
grid()
legend(
"topleft",
legend=c("Class 1", "Class 2"),
pch=20,
col=c(2, 3),
bg="white"
)
mu1_s = colMeans(z1)
mu2_s = colMeans(z2)
S = pooled.cov(rbind(z1, z2), c(lab1, lab2)) # pooled covariance
MU_pos = mu1_s + mu2_s
dim(MU_pos) = c(2, 1)
MU_neg = mu2_s - mu1_s
dim(MU_neg) = c(2, 1)
c = 0.5 * t(MU_pos) %*% inv(S) %*% MU_neg
x = t(MU_neg) %*% inv(S)
k = x[1] / -x[2]
m = c / x[2]
plot(
z1,
col=2,
xlim=c(-7, 4),
ylim = c(-3, 5),
xlab=expression('x'[1]),
ylab=expression('x'[2]),
pch=20
)
points(z2, col=3, pch=20)
abline(a=m, b=k)
grid()
legend(
"topleft",
legend=c("Class 1", "Class 2"),
pch=20,
col=c(2, 3),
bg="white"
)
library(lattice)
library(ggplot2)
library(caret)
library(SimDesign)
library(MASS)
library(matlib)
library(Rfast)
set.seed(1337)
n1 = n2 = 150
mu1 = c(0, 0)
mu2 = c(-3, 2)
z1 = SimDesign::rmvnorm(n1, mu1)
lab1 = rep(1, n1)
z2 = SimDesign::rmvnorm(n2, mu2)
lab2 = rep(2, n2)
plot(
z1,
col=2,
xlim=c(-7, 4),
ylim = c(-3, 5),
xlab=expression('x'[1]),
ylab=expression('x'[2]),
pch=20
)
points(z2, col=3, pch=20)
grid()
legend(
"topleft",
legend=c("Class 1", "Class 2"),
pch=20,
col=c(2, 3),
bg="white"
)
mu1_s = colMeans(z1)
mu2_s = colMeans(z2)
S = pooled.cov(rbind(z1, z2), c(lab1, lab2)) # pooled covariance
MU_pos = mu1_s + mu2_s
dim(MU_pos) = c(2, 1)
MU_neg = mu2_s - mu1_s
dim(MU_neg) = c(2, 1)
c = 0.5 * t(MU_pos) %*% inv(S) %*% MU_neg
x = t(MU_neg) %*% inv(S)
k = x[1] / -x[2]
m = c / x[2]
plot(
z1,
col=2,
xlim=c(-7, 4),
ylim = c(-3, 5),
xlab=expression('x'[1]),
ylab=expression('x'[2]),
pch=20
)
points(z2, col=3, pch=20)
abline(a=m, b=k)
grid()
legend(
"topleft",
legend=c("Class 1", "Class 2"),
pch=20,
col=c(2, 3),
bg="white"
)
# stack observations and labels to data frame
Z = rbind(z1, z2)
Y = as.factor(c(lab1, lab2))
dat = as.data.frame(cbind(Z, Y))
# fit LDA model
mdl = lda(
Y ~ V1 + V2,
data=dat
)
mu = mdl$means
w = mdl$scaling
mu_vec = colSums(mu)
dim(mu_vec) = c(2, 1)
c = 0.5 * t(w) %*% mu_vec
lda_k = w[1] / -w[2]
lda_m = c / w[2]
par(mfrow=c(1, 2))
plot(
z1,
col=2,
xlim=c(-7, 4),
ylim = c(-3, 5),
xlab=expression('x'[1]),
ylab=expression('x'[2]),
pch=20,
)
points(z2, col=3, pch=20)
abline(a=m, b=k, lty=1, lwd=2)
grid()
legend(
"topleft",
legend=c("Class 1", "Class 2"),
pch=20,
col=c(2, 3),
bg="white"
)
legend('topright', 'MLE', lty=1, bg='white')
plot(
z1,
col=2,
xlim=c(-7, 4),
ylim = c(-3, 5),
xlab=expression('x'[1]),
ylab=expression('x'[2]),
pch=20
)
points(z2, col=3, pch=20)
abline(a=lda_m, b=lda_k, lty=2, lwd=2)
grid()
legend(
"topleft",
legend=c("Class 1", "Class 2"),
pch=20,
col=c(2, 3),
bg="white"
)
legend('topright', 'lda()', lty=2,  bg='white')
paste("Task 2 - MLE decision boundary: y = ",
round(k, 4), "x + ", round(m, 4), sep=""
)
paste("Task 3 - lda() decision boundary: y = ",
round(lda_k, 4), "x + ", round(lda_m, 4), sep=""
)
# generate another set of observations
set.seed(1337)
n3 = 150
mu3 = c(-1, -3)
z3 = SimDesign::rmvnorm(n3, mu3)
lab3 = rep(3, n3)
plot(
z1,
col=2,
xlim=c(-7, 4),
ylim = c(-7, 6),
xlab=expression('x'[1]),
ylab=expression('x'[2]),
pch=20
)
points(z2, col=3, pch=20)
points(z3, col=4, pch=20)
grid()
legend(
"topleft",
legend=c("Class 1", "Class 2", "Class 3"),
pch=20,
col=c(2, 3, 4),
bg="white"
)
# create data frame for all three classes
Z = rbind(z1, z2, z3)
Y = as.factor(c(lab1, lab2, lab3))
dat3 = as.data.frame(cbind(Z, Y))
# fit 3-class LDA
Mod = lda(
Y ~ V1 + V2,
data=dat3
)
# data frame
x1 = seq(-6, 4, 0.1)
x2 = seq(-6, 6, 0.1)
d = expand.grid(x1, x2)
names(d) = c("V1", "V2")
d_pred = predict(Mod, d)
# extract predicted points and label according to class
d1_idx = d_pred$class == 1
d2_idx = d_pred$class == 2
d3_idx = d_pred$class == 3
d1_pred = d[d1_idx, ]
d2_pred = d[d2_idx, ]
d3_pred = d[d3_idx, ]
plot(
z1,
col=2,
xlim=c(-6, 4),
ylim = c(-6, 6),
xlab=expression('x'[1]),
ylab=expression('x'[2]),
pch=20
)
points(z2, col=3, pch=20)
points(z3, col=4, pch=20)
points(
d1_pred,
col=2,
pch=20
)
points(
d2_pred,
col=3,
pch=20
)
points(
d3_pred,
col=4,
pch=20
)
grid()
legend(
"topleft",
legend=c("Class 1", "Class 2", "Class 3"),
pch=20,
col=c(2, 3, 4),
bg="white"
)
mu5 = Mod$means
w5 = Mod$scaling
mu5_vec = colSums(mu5)
dim(mu5_vec) = c(2, 1)
c5 = (1 / 3) * w5 %*% mu5_vec
lda_k5_1 = w5[1, 1] / -w5[1, 2]
lda_m5_1 = c5[1] / w5[1, 2]
lda_k5_2 = w5[2, 1] / -w5[2, 2]
lda_m5_2 = c5[2] / w5[2, 2]
plot(
z1,
col=2,
xlim=c(-6, 4),
ylim = c(-6, 6),
xlab=expression('x'[1]),
ylab=expression('x'[2]),
pch=20
)
points(z2, col=3, pch=20)
points(z3, col=4, pch=20)
abline(a=lda_m5_1, b=lda_k5_1, lty=1)
abline(a=lda_m5_2, b=lda_k5_2, lty=2)
grid()
legend(
"topleft",
legend=c("Class 1", "Class 2", "Class 3"),
pch=20,
col=c(2, 3, 4),
bg="white"
)
mu1_s = colMeans(z1)
mu2_s = colMeans(z2)
mu3_s = colMeans(z3)
S = pooled.cov(rbind(z1, z2, z3), c(lab1, lab2, lab3)) # pooled covariance
MU_pos = mu1_s + mu2_s
dim(MU_pos) = c(2, 1)
MU_neg = mu2_s - mu1_s
dim(MU_neg) = c(2, 1)
c = (1 / 2) * t(MU_pos) %*% inv(S) %*% MU_neg
x = t(MU_neg) %*% inv(S)
k1 = x[1] / -x[2]
m1 = c / x[2]
MU_pos = mu1_s + mu3_s
dim(MU_pos) = c(2, 1)
MU_neg = mu3_s - mu1_s
dim(MU_neg) = c(2, 1)
c = (1 / 2) * t(MU_pos) %*% inv(S) %*% MU_neg
x = t(MU_neg) %*% inv(S)
k2 = x[1] / -x[2]
m2 = c / x[2]
MU_pos = mu2_s + mu3_s
dim(MU_pos) = c(2, 1)
MU_neg = mu3_s - mu2_s
dim(MU_neg) = c(2, 1)
c = (1 / 2) * t(MU_pos) %*% inv(S) %*% MU_neg
x = t(MU_neg) %*% inv(S)
k3 = x[1] / -x[2]
m3 = c / x[2]
plot(
z1,
col=2,
xlim=c(-6, 4),
ylim = c(-6, 6),
xlab=expression('x'[1]),
ylab=expression('x'[2]),
pch=20
)
points(z2, col=3, pch=20)
points(z3, col=4, pch=20)
points(
d1_pred,
col=2,
pch=20
)
points(
d2_pred,
col=3,
pch=20
)
points(
d3_pred,
col=4,
pch=20
)
abline(a=m1, b=k1, lty=1, lwd=2)
abline(a=m2, b=k2, lty=2, lwd=2)
abline(a=m3, b=k3, lty=3, lwd=2)
grid()
legend(
"topleft",
legend=c("Class 1", "Class 2", "Class 3"),
pch=20,
col=c(2, 3, 4),
bg="white"
)
